// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeddingInfo.Domain.Context;

namespace WeddingInfo.Domain.Migrations
{
    [DbContext(typeof(JasonSarahContext))]
    [Migration("20181103032053_ordering")]
    partial class ordering
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WeddingInfo.Domain.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<int>("EventDifficulty");

                    b.Property<int>("EventType");

                    b.Property<bool>("IsWeddingEvent");

                    b.Property<bool>("IsWeddingPartyEvent");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Occurance");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("WeddingInfo.Domain.Models.HomeComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("HomeComponents");

                    b.HasData(
                        new { Id = 1, Title = "Default Title" }
                    );
                });

            modelBuilder.Entity("WeddingInfo.Domain.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WeddingInfo.Domain.Models.Lodging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Lodgings");
                });

            modelBuilder.Entity("WeddingInfo.Domain.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EventId");

                    b.Property<int?>("EventId1");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("LocationId1");

                    b.Property<int?>("LodgingId");

                    b.Property<int?>("LodgingId1");

                    b.Property<int>("MediaType");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventId1");

                    b.HasIndex("LocationId");

                    b.HasIndex("LocationId1");

                    b.HasIndex("LodgingId");

                    b.HasIndex("LodgingId1");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("WeddingInfo.Domain.Models.Parallax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImgUrl");

                    b.HasKey("Id");

                    b.ToTable("Parallaxes");
                });

            modelBuilder.Entity("WeddingInfo.Domain.Models.Registry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageSrc");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Registries");
                });

            modelBuilder.Entity("WeddingInfo.Domain.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BottomParallaxId");

                    b.Property<string>("Header");

                    b.Property<int?>("HomeComponentId");

                    b.Property<int>("Order");

                    b.Property<string>("Text");

                    b.Property<int?>("TopParallaxId");

                    b.HasKey("Id");

                    b.HasIndex("BottomParallaxId");

                    b.HasIndex("HomeComponentId");

                    b.HasIndex("TopParallaxId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("WeddingInfo.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("Category")
                        .HasMaxLength(36);

                    b.Property<string>("Dietary")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<int?>("EventId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(36);

                    b.Property<string>("Gift")
                        .HasMaxLength(200);

                    b.Property<int>("Guests");

                    b.Property<string>("Household")
                        .HasMaxLength(36);

                    b.Property<string>("Icon")
                        .HasMaxLength(300);

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsAttending");

                    b.Property<bool>("IsGuest");

                    b.Property<string>("LastName")
                        .HasMaxLength(36);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(36);

                    b.Property<string>("Password")
                        .HasMaxLength(516);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(36);

                    b.Property<bool>("Rehearsal");

                    b.Property<bool>("SentSaveTheDate");

                    b.Property<bool>("SentThankYou");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EventId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WeddingInfo.Domain.Models.Media", b =>
                {
                    b.HasOne("WeddingInfo.Domain.Models.Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId");

                    b.HasOne("WeddingInfo.Domain.Models.Event")
                        .WithMany("Videos")
                        .HasForeignKey("EventId1");

                    b.HasOne("WeddingInfo.Domain.Models.Location")
                        .WithMany("Images")
                        .HasForeignKey("LocationId");

                    b.HasOne("WeddingInfo.Domain.Models.Location")
                        .WithMany("Videos")
                        .HasForeignKey("LocationId1");

                    b.HasOne("WeddingInfo.Domain.Models.Lodging")
                        .WithMany("Images")
                        .HasForeignKey("LodgingId");

                    b.HasOne("WeddingInfo.Domain.Models.Lodging")
                        .WithMany("Videos")
                        .HasForeignKey("LodgingId1");
                });

            modelBuilder.Entity("WeddingInfo.Domain.Models.Section", b =>
                {
                    b.HasOne("WeddingInfo.Domain.Models.Parallax", "BottomParallax")
                        .WithMany()
                        .HasForeignKey("BottomParallaxId");

                    b.HasOne("WeddingInfo.Domain.Models.HomeComponent")
                        .WithMany("Sections")
                        .HasForeignKey("HomeComponentId");

                    b.HasOne("WeddingInfo.Domain.Models.Parallax", "TopParallax")
                        .WithMany()
                        .HasForeignKey("TopParallaxId");
                });

            modelBuilder.Entity("WeddingInfo.Domain.Models.User", b =>
                {
                    b.HasOne("WeddingInfo.Domain.Models.Event")
                        .WithMany("Guests")
                        .HasForeignKey("EventId");
                });
#pragma warning restore 612, 618
        }
    }
}
